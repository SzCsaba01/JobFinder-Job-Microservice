// <auto-generated />
using System;
using Job.Data.Access.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Job.Data.Access.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240711163131_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Job.Data.Object.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.CompanyEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<float>("TotalRating")
                        .HasColumnType("real");

                    b.HasKey("Name");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.ContractTypeEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.ExternalSourceVisitClickEntity", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClickDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isFeedbackMailSent")
                        .HasColumnType("bit");

                    b.HasKey("UserProfileId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("ExternalSourceVisitClicks");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobCategoryMapping", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JobId", "CategoryName");

                    b.HasIndex("CategoryName");

                    b.ToTable("JobCategoryMappings");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractTypeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtrnalSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isRemote")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName");

                    b.HasIndex("ContractTypeName");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobRecommendationMapping", b =>
                {
                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecommendationId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobRecommendationMappings");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobTagMapping", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JobId", "TagName");

                    b.HasIndex("TagName");

                    b.ToTable("JobTagMappings");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.LocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.RecommendationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("JobRecommendations");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.SavedJobEntity", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserProfileId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("SavedJobs");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.TagEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.UserFeedbackEntity", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<float>("CompanyRating")
                        .HasColumnType("real");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.ExternalSourceVisitClickEntity", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany("ExternalSourceVisitClicks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobCategoryMapping", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.CategoryEntity", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany("Categories")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobEntity", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.CompanyEntity", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job.Data.Object.Entities.ContractTypeEntity", "ContractType")
                        .WithMany("Jobs")
                        .HasForeignKey("ContractTypeName");

                    b.Navigation("Company");

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobRecommendationMapping", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job.Data.Object.Entities.RecommendationEntity", "Recommendation")
                        .WithMany("Jobs")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobTagMapping", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany("Tags")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job.Data.Object.Entities.TagEntity", "Tag")
                        .WithMany("Jobs")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.LocationEntity", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany("Locations")
                        .HasForeignKey("JobId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.SavedJobEntity", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany("SavedJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.UserFeedbackEntity", b =>
                {
                    b.HasOne("Job.Data.Object.Entities.JobEntity", "Job")
                        .WithMany("UserFeedbacks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.ContractTypeEntity", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.JobEntity", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("ExternalSourceVisitClicks");

                    b.Navigation("Locations");

                    b.Navigation("SavedJobs");

                    b.Navigation("Tags");

                    b.Navigation("UserFeedbacks");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.RecommendationEntity", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job.Data.Object.Entities.TagEntity", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
